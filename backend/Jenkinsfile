pipeline {
    agent any

    stages {
        stage('Pull Code') {
            steps {
                checkout scm
            }
        }
        stage('Download dependency') {
            steps {
                sh 'cd backend && npm install'
            }
        }
        stage('Unit Testing') {
            steps {
                sh 'cd backend && npm run unit-test'
            }
        }
        stage('Unit Testing Report') {
            steps {
                sh 'cd backend && npm run unit-test-report'
            }
        }
        stage('Component Testing') {
            steps {
                sh 'cd backend && npm run component-test-report'
            }
        }
        stage('Component Testing Report') {
            steps {
                sh 'cd backend && npm run component-test-report'
            }
        

        }
        stage('Create Coverage Report') {
            steps {
                echo 'code coverage report'
                // sh ''
                clover(cloverReportDir: 'backend/coverage', cloverReportFileName: 'clover.xml',
                    healthyTarget: [methodCoverage: 70, conditionalCoverage: 80, statementCoverage: 80],
                    unhealthyTarget: [methodCoverage: 50, conditionalCoverage: 50, statementCoverage: 50],
                    failingTarget: [methodCoverage: 0, conditionalCoverage: 0, statementCoverage: 0]
                )
            }
        }
        stage('Build') {
            steps {
                withCredentials([
                    usernamePassword(credentialsId: 'username-password-ssh', passwordVariable: 'password', usernameVariable: 'user_name'), 
                    string(credentialsId: 'backend-host', variable: 'host_ip'), string(credentialsId: 'host_name', variable: 'host_name'), 
                    usernamePassword(credentialsId: 'team-13-dockerhub', passwordVariable: 'docker_password', usernameVariable: 'docker_username')]) {
                    script{
                        def remote = [:]
                        remote.name = host_name
                        remote.host = host_ip
                        remote.user = user_name
                        remote.password = password
                        remote.allowAnyHosts = true
                        
                        sshCommand remote: remote, command: "rm -rf SWDEV-BBP-PLUS && git clone -b develop https://github.com/konlawatit/SWDEV-BBP-PLUS"
                        sshCommand remote: remote, command: "docker-compose -f SWDEV-BBP-PLUS/docker-compose-build.yml build backend"
                        sshCommand remote: remote, command: "docker login -u $docker_username -p $docker_password"
                        sshCommand remote: remote, command: "docker push konlawatit/team-13-backend:1.0.0"
                        sshCommand remote: remote, command: "docker image rmi -f konlawatit/team-13-backend:1.0.0"
                        sshCommand remote: remote, command: "docker logout"
                    }
                }
            }
        }
        stage('Deployment') {
            steps {
                withCredentials([
                    usernamePassword(credentialsId: 'username-password-ssh', passwordVariable: 'password', usernameVariable: 'user_name'), 
                    string(credentialsId: 'backend-host', variable: 'host_ip'), string(credentialsId: 'host_name', variable: 'host_name'), 
                    usernamePassword(credentialsId: 'team-13-dockerhub', passwordVariable: 'docker_password', usernameVariable: 'docker_username')]) {
                    script{
                        def remote = [:]
                        remote.name = host_name
                        remote.host = host_ip
                        remote.user = user_name
                        remote.password = password
                        remote.allowAnyHosts = true
                        
                        // sshCommand remote: remote, command: "docker logout"
                        sshCommand remote: remote, command: "docker-compose -f SWDEV-BBP-PLUS/docker-compose.yml up -d team-13-backend"
                        sshCommand remote: remote, command: "rm -r SWDEV-BBP-PLUS"
                    }
                }
            }
        }
    }
}